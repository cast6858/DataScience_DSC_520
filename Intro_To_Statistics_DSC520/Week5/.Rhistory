A<-10
A
x <- 2L
typeof(x)
q1 <- FALSE
A <- 10
B <- 5
C <- A
C <- A + B
C
var1 <- 2.5
var1 <- 2.5
var2 <- 4
#variable 1
var1 <- 2.5
#variable 2
var2 <- 4
result <- var1 / var2
result
answer <- sqrt(var2)
greeting <- "Hello"
name <- "Bob"
message <- paste(greeting , name)
otherMessage <- greeting + name
myFirstVectors <- c(3,4,6,900)
is.numeric(myFirstVectors)
myFirstVectors[1]
myFirstVectors[-4]
a <- c("a" ,"b","c")
a <- c("a" ,"b","c")
a[1]
a <- c(1,2,3,4)
b <- c(2,3,4,5)
a + b
a > b
a < b
a <- c(1,2,3,6)
b <- c(2,3,4,5)
a < b
x <- rnorm(6)
x
x <- rnorm(6)
for( i in x){
print(i)
}
for( j in 1:5) {
print(x[j])
}
n <- 100
a <- rnorm(n)
b <- rnorm(n)
c <- a * b
d <- replicate(NA, N)
d <- replicate(NA, N)
n <- 100
a <- rnorm(n)
b <- rnorm(n)
c <- a * b
d <- rep(NA, N)
n <- 100
a <- rnorm(n)
b <- rnorm(n)
c <- a * b
d <- rep(NA, n)
d <- rep(NA, n)
for( i in 1:N) {
d[i] <- a[i] * b[i]
}
n <- 100
a <- rnorm(n)
b <- rnorm(n)
c <- a * b
d <- rep(NA, n)
for( i in 1:n) {
d[i] <- a[i] * b[i]
}
8 + 5
22 - 6
6 * 7
(4 + 6) / 2
4 + 6 / 2
5 % 2
5 % 2
5 %% 2
## Assign the value 82 to the variable x
## Print x
x <- 82
x
y <- 41
y
class_name <- "DSC520"
print(class_name)
## Assign the output of x + y to the variable z
## Print z
z <- x + y
z
class(is_good)
## Assign the string value of TRUE to the variable is_good
## Print the value of is_good
is_good <- "TRUE"
class(is_good)
class(z)
## Check the class of the variable class_name using the class() function
class(class_name)
## Create a numeric vector with the values of 3, 2, 1 using the `c()` function
## Assign the value to a variable named `num_vector`
## Print the vector
num_vector <- c( 3, 2 ,1)
class(num_vector)
num_vector
## Create a character vector with the values of "three", "two", "one" "using the `c()` function
## Assign the value to a variable named `char_vector`
## Print the vector
char_vector <- c("three", "two", "one")
char_vector
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[2]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[6:7]
week1_sleep_weekdays
## Add the total hours slept in week one using the `sum` function
## Assign the value to variable `total_sleep_week1`
total_sleep_week1 <- sum(week1_sleep)
total_sleep_week1
## Create a vector called `week2_sleep` representing how many hours slept each night of the week
## Use the values 7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9
week2_sleep <- c(7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9)
## Add the total hours slept in week two using the sum function
## Assign the value to variable `total_sleep_week2`
total_sleep_week2 <- sum(week2_sleep)
total_sleep_week2
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
total_sleep_week1 < total_sleep_week2
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <- c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
week1_sleep_weekdays <- week1_sleep[7:1]
week1_sleep_weekdays
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[6:&]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[6:7]
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <- c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- c(days)
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[2:6]
week1_sleep_weekdays
names(week2_sleep) <- days
## Display the amount of sleep on Tuesday of week 1 by selecting the variable name
week1_sleep["Tuesday"]
## Create vector called weekdays from the days vector
weekdays <- days[2:6]
weekdays
## Create vector called weekends containing Sunday and Saturday
weekends <- c("Saturday", "Sunday" )
## Calculate the mean about sleep on weekdays for each week
## Assign the values to weekdays1_mean and weekdays2_mean
weekdays1_mean <- mean(week1_sleep[weekdays])
weekdays2_mean <- mean(week2_sleep[weekdays])
## Using the weekdays1_mean and weekdays2_mean variables,
## see if weekdays1_mean is greater than weekdays2_mean using the `>` operator
weekdays1_mean > weekdays2_mean
week1_sleep > 8
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3, 87.9)
students_combined <- __c(student01,student02, student03)
students_combined <- c(student01,student02, student03)
grades <- matrix(students_combined, byrow = T, nrow = 2)
grades
grades <- matrix(students_combined, byrow = T, nrow = 3)
grades
grades <- matrix(students_combined, byrow = T, nrow = 1)
grades
grades <- matrix(students_combined, byrow = T, nrow = 3)
grades <- rbind(grades, student04)
## Add a new student row with `rbind()`
student04 <- c(95.2, 94.1)
grades <- rbind(grades, student04)
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades, assignment04)
grades
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(students) <- grades__
rownames(students) <- grades
rownames(assignments) <- grades
rownames(grades) <- students
grades
name <- "Felipe Castillo"
name
library(tidyverse)
library(magrittr)
library(ggplot2)
library(readxl)
library(plyr)
library(dplyr)
library(purrr)
setwd("/Intro_To_Statistics_DSC520/Week5")
housing_data <- read_excel("week-6-housing.xlsx")
housing.splitted_zip<- split(housing_data, housing_data$zip5)
housing.unsplitted_zip <- unsplit(housing.splitted_zip, housing_data$zip5)
housing.unsplitted_zip <- unsplit(housing.splitted_zip)
housing.unsplitted_zip <- unsplit(housing.splitted_zip,zip5)
housing.unsplitted_zip <- unsplit(housing.splitted_zip,housing.data$zip5)
housing.unsplitted_zip <- unsplit(housing.splitted_zip,housing_data$zip5)
housing.splitted_zip<- split(housing_data, housing_data$zip5)
housing.unsplitted_zip <- unsplit(housing.splitted_zip,housing_data$zip5)
housing_data$zip5
housing.splitted_zip
housing.unsplitted_zip <- unsplit(housing.splitted_zip,housing_data$zip5)
housing.splitted_zip<- split(housing_data, f = housing_data$zip5)
housing.splitted_zip
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing&zip5)
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing_data&zip5)
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing_data&zip5)
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing_data$zip5)
housing.splitted_zip
housing.unsplitted_zip
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing_data$zip5)
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing_data$zip5)
housing.unsplitted_zip
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing_data$zip5)
housing.unsplitted_zip
housing.splitted_zip<- split(housing_data, f = housing_data$zip5)
housing.splitted_housing_sqft <- split(housing_data, housing_data$square_feet_total_living)
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing_data$zip5)
housing.unsplitted_zip
housing.unsplitted_zip <- unsplit( split(housing_data, f = housing_data$zip5) , f = housing_data$zip5)
housing.unsplitted_zip
housing.splitted_zip
#reshape(df, idvar='time', timevar='team', direction='wide')
housing.unsplitted_zip <- reshape(housing_data, idvar='zip5', timevar='zip5', direction='wide')
#reshape(df, idvar='time', timevar='team', direction='wide')
housing.unsplitted_zip <- reshape(housing_data, idvar='zip5', direction='wide')
#reshape(df, idvar='time', timevar='team', direction='wide')
housing.unsplitted_zip <- reshape(housing_data, idvar='zip5', direction='wide')
#reshape(df, idvar='time', timevar='team', direction='wide')
housing.unsplitted_zip <- reshape(housing_data, idvar='zip5', direction='wide')
#reshape(df, idvar='time', timevar='team', direction='wide')
housing.unsplitted_zip <- reshape(housing_data, idvar='zip5',timevar='zip5', direction='wide')
#reshape(df, idvar='time', timevar='team', direction='wide')
housing.unsplitted_zip <- reshape(housing_data, timevar='zip5', direction='wide')
unsplit(housing.splitted_zip, housing_data$zip5)
df.housing <- as.data.frame(housing_data)
df.housing
housing.df_splitted_zip <- split(df.housing, f =housing_data$zip5)
housing.df_splitted_zip
housing.df_splitted_zip
housing.df_splitted_zip <- split(df.housing, f =df.housing$zip5)
housing.df_splitted_zip
str(housing.df_splitted_zip)
df.housing <- data.frame(housing_data)#trying data frame
df.housing
housing.df_splitted_zip <- split(df.housing, f =df.housing$zip5)
housing.df_splitted_zip
housing.df_splitted_zip
housing.df_splitted_zip <- split(df.housing, f =df.housing$zip5)
housing.df_splitted_zip
str(housing.df_splitted_zip)
housing.splitted_zip<- split(housing_data, f = housing_data$zip5)
housing.splitted_housing_sqft <- split(housing_data, housing_data$square_feet_total_living)
unsplit(housing.splitted_zip, housing_data$zip5 , housing_data$zip5)
unsplit(split(housing.splitted_zip, housing_data$zip5, housing_data$zip5))
unsplit(split(housing.splitted_zip, housing_data$zip5,f= housing_data$zip5))
unsplit(split(housing.splitted_zip, housing_data$zip5, housing_data$zip5))
unsplit(split(housing.splitted_zip, f = housing_data$zip5, housing_data$zip5))
unsplit(split(housing.splitted_zip, housing_data$zip5, housing_data$zip5))
unsplit(split(housing.splitted_zip, housing_data$zip5))
library(tidyverse)
library(magrittr)
library(ggplot2)
library(readxl)
library(plyr)
library(dplyr)
library(purrr)
library(tidyverse)
housing_data <- read_excel("week-6-housing.xlsx")
housing.splitted_zip<- split(housing_data, f = housing_data$zip5)
housing.splitted_housing_sqft <- split(housing_data, housing_data$square_feet_total_living)
unsplit(split(housing.splitted_zip, housing_data$zip5, housing_data$zip5))
unsplit(split(housing.splitted_zip, zip5, zip5))
do.call(rbind, housing_data)
do.call(rbind, housing.splitted_zip)
housing.splitted_zip<- split(housing_data, f = housing_data$zip5)
housing.df_splitted_zip
library(tidyverse)
library(magrittr)
library(ggplot2)
library(readxl)
library(plyr)
library(dplyr)
library(purrr)
setwd("/Intro_To_Statistics_DSC520/Week5")
housing_data <- read_excel("week-6-housing.xlsx")
housing.splitted_zip<- split(housing_data, f = housing_data$zip5)
housing.df_splitted_zip
housing.splitted_zip<- split(housing_data, f = housing_data$zip5)
housing.splitted_zip
do.call(rbind, housing.splitted_zip)
housing.splitted_zip
housing.splitted_zip
housing_splitted.concat <- do.call(rbind, housing.splitted_zip)
housing_splitted.concat
housing_splitted.concat
view(housing_splitted.concat)
#group by
#When i look at a property , i shop by zip code, every zip code can have different pricing.
housing.groupedbyzip <- housing_data %>% group_by(zip5)
housing.groupedbyzip
view(housing.groupedbyzip)
#group by
#When i look at a property , i shop by zip code, every zip code can have different pricing.
housing.groupedbyzip <- housing_data %>% group_by(zip5)
housing.groupedbyzip
#summerize
#seeing the average price and sqft for a given year.
housing.summerized <- housing_data %>% summarise(housing_price_mean = mean(Sale_Price),
house_sqft_mean = mean(square_feet_total_living))
housing.summerized
#mutate
#classifying the housing data by price amount, to understand what is on the higher end and whats on the lower end. The price is related to the square footage the, higher the more you should pay.Without the exception of outliers.
housing.mutated <- housing_data %>% mutate(score_feet_over =
case_when(square_feet_total_living <= 1800 ~ "low" ,
square_feet_total_living > 1800 & square_feet_total_living < 3000  ~ "mid",
square_feet_total_living >= 3000 ~ "high"))
view(housing.mutated)
#filter
#investing in real estate understanding zoning is important, some zoning do let you add on to your house, this could be a deal kill and possible inference to increase in price.
housing.filter_zoning <- housing_data %>% filter (current_zoning == "RA5")
view(housing.filter_zoning)
housing.filter_zoning
str(housing.filter_zoning)
view(housing.filter_zoning)
view(housing.filter_zoning)
#select
#combined size of home, sqft of home, and lot size to make better sense of its correlation.
housing.selected_homesize <- housing_data %>% select(Sale_Price,
square_feet_total_living,
sq_ft_lot)
housing.selected_homesize
#arrange
#Perhapes you want the higher price homes sold that year. Easier to read the prices of the data when they are in order. Highest price well over 4million, lowest 698 dollars.
housing.price_desc <- housing_data %>% arrange(desc(Sale_Price))
view(housing.price_desc)
#purrr keep
# A more realistic price for middle class pricing, most of the prices where around this range, theres alot that can be gather by this range.
housing.keep_price_below <- keep(housing_data$Sale_Price,function(x) x < 500000)
View(housing.keep_price_below)
housing.keep_price_below
#purrr keep
# A more realistic price for middle class pricing, most of the prices where around this range, theres alot that can be gather by this range.
housing.keep_price_below <- keep(housing_data$Sale_Price,function(x) x < 500000)
housing.keep_price_below
view(housing.keep_price_below)
#purrr discard
# Looking at the data with a sales warning, alot of NA values so checking the error warning values for a give property. And how many there are in total.
housing.warning_data <- discard(housing_data$sale_warning, is.na)
housing.warning_data
housing.sales_price = housing_data$Sale_Price
housing.sqft = housing_data$square_feet_total_living
cbind(housing.sales_price, housing.sqft)
rbind(housing.sales_price, housing.sqft)
#4
housing.splitted_zip<- split(housing_data, f = housing_data$zip5)
housing.splitted_zip
housing_splitted.concat <- do.call(rbind, housing.splitted_zip)
housing_splitted.concat
#purrr keep
# A more realistic price for middle class pricing, most of the prices where around this range, theres alot that can be gather by this range.
housing.keep_price_below <- keep(housing_data$Sale_Price,function(x) x < 500000)
housing.keep_price_below
